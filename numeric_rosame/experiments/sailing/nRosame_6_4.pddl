(define (domain sailing)
(:requirements :typing :fluents :negative-preconditions :equality)
(:types 	boat person - object
)

(:predicates (saved ?t - person)
)

(:functions (x ?b - boat)
	(y ?b - boat)
	(d ?t - person)
)

(:action go_north_east
	:parameters (?a - boat)
	:precondition (and (<= (* (y ?a) -1) 0)
	(<= (+ (* (x ?a) -1) (* (y ?a) -0.0084)) 1)
	(<= (+ (* (x ?a) 0.7071) (* (y ?a) -0.7071)) 0)
	(<= (+ (* (x ?a) 0.7557) (* (y ?a) -0.6549)) 1.5114)
	(<= (+ (* (x ?a) 0.9728) (* (y ?a) -0.2316)) 15.7039)
	(<= (+ (* (y ?a) 0.0545) (* (x ?a) -0.9985)) 4.7384)
	(<= (+ (* (y ?a) 0.1331) (* (x ?a) 0.9911)) 28.1797)
	(<= (+ (* (y ?a) 0.2822) (* (x ?a) 0.9594)) 37.4717)
	(<= (+ (* (y ?a) 0.5665) (* (x ?a) 0.8240)) 56.4984)
	(<= (+ (* (y ?a) 0.7071) (* (x ?a) -0.7071)) 61.5183)
	(<= (+ (* (y ?a) 0.8742) (* (x ?a) -0.4856)) 76.6345))
	:effect (and 
(increase (x ?a) 1.5000)		
(increase (y ?a) 1.5000)))

(:action go_north_west
	:parameters (?a - boat)
	:precondition (and (<= (+ (* (x ?a) -0.7071) (* (y ?a) -0.7071)) -14.8492)
	(<= (+ (* (x ?a) 0.7071) (* (y ?a) -0.7071)) 0)
	(<= (+ (* (x ?a) 0.7071) (* (y ?a) 0.7071)) 70.7107)
	(<= (+ (* (x ?a) 0.7557) (* (y ?a) -0.6549)) 1.6625)
	(<= (+ (* (x ?a) 0.9939) (* (y ?a) 0.1104)) 25.5097)
	(<= (+ (* (y ?a) -0.0389) (* (x ?a) -0.9992)) -2.2580)
	(<= (+ (* (y ?a) 0.0182) (* (x ?a) -0.9998)) 1.0544)
	(<= (+ (* (y ?a) 0.0767) (* (x ?a) -0.9971)) 6.0590)
	(<= (+ (* (y ?a) 0.1843) (* (x ?a) 0.9829)) 28.3804)
	(<= (+ (* (y ?a) 0.3757) (* (x ?a) 0.9267)) 41.7033))
	:effect (and 
(increase (y ?a) 1.5000)		
(decrease (x ?a) 1.5000)))

(:action go_west
	:parameters (?a - boat)
	:precondition (and (<= (+ (* (x ?a) -0.8666) (* (y ?a) -0.4990)) -23.7139)
	(<= (+ (* (x ?a) 0.7071) (* (y ?a) -0.7071)) -0.7071)
	(<= (+ (* (x ?a) 0.9261) (* (y ?a) -0.3773)) 10.5986)
	(<= (+ (* (y ?a) -0.1961) (* (x ?a) -0.9806)) -14.1204)
	(<= (+ (* (y ?a) 0.1331) (* (x ?a) 0.9911)) 29.8661)
	(<= (+ (* (y ?a) 0.2822) (* (x ?a) 0.9594)) 39.3340)
	(<= (+ (* (y ?a) 0.3162) (* (x ?a) -0.9487)) 11.3842)
	(<= (+ (* (y ?a) 0.3890) (* (x ?a) -0.9212)) 15.4770)
	(<= (y ?a) 76.5000))
	:effect (and 
(decrease (x ?a) 3)))

(:action go_south_west
	:parameters (?a - boat)
	:precondition (and (= (x ?a) -2)
	(= (y ?a) 49))
	:effect (and 
(assign (x ?a) 0)		
(assign (y ?a) 47)))

(:action go_south_east
	:parameters (?a - boat)
	:precondition (and (<= (+ (* (x ?a) 0.8321) (* (y ?a) -0.5547)) -28.2897)
	(<= (+ (* (y ?a) 0.0555) (* (x ?a) -0.9985)) 2.8290)
	(<= (x ?a) 2))
	:effect (and 
(decrease (y ?a) 2)		
(decrease (x ?a) 2)))

(:action save_person
	:parameters (?a - boat ?b - person)
	:precondition (and (<= (+ (* (d ?b) 0.5182) (+ (* (x ?a) 0.5889) (* (y ?a) -0.6203))) -1.1070)
	(<= (+ (* (d ?b) 0.5570) (+ (* (y ?a) -0.5064) (* (x ?a) -0.6583))) 4.5067)
	(<= (+ (* (d ?b) 0.5758) (+ (* (x ?a) 0.6281) (* (y ?a) -0.5234))) 4.6585)
	(<= (+ (* (d ?b) 0.5772) (+ (* (x ?a) -0.5628) (* (y ?a) -0.5917))) -0.8803)
	(<= (+ (* (d ?b) 0.5774) (+ (* (x ?a) -0.5774) (* (y ?a) -0.5774))) 0)
	(<= (+ (* (d ?b) 0.5774) (+ (* (x ?a) 0.5774) (* (y ?a) -0.5774))) 0)
	(<= (+ (* (d ?b) 0.6081) (+ (* (x ?a) 0.4916) (* (y ?a) -0.6233))) -0.9274)
	(<= (+ (* (x ?a) -0.7071) (* (y ?a) -0.7071)) -14.8492)
	(<= (+ (* (x ?a) 0.1119) (+ (* (y ?a) 0.5146) (* (d ?b) -0.8501))) 5.4811)
	(<= (+ (* (x ?a) 0.2106) (+ (* (y ?a) 0.9124) (* (d ?b) -0.3509))) 56.4999)
	(<= (+ (* (x ?a) 0.5774) (+ (* (y ?a) 0.5774) (* (d ?b) -0.5774))) 14.4338)
	(<= (+ (* (x ?a) 0.6435) (+ (* (y ?a) 0.6987) (* (d ?b) -0.3126))) 40.6343)
	(<= (+ (* (x ?a) 0.6613) (+ (* (y ?a) 0.6259) (* (d ?b) -0.4133))) 28.4024)
	(<= (+ (* (x ?a) 0.9899) (* (y ?a) 0.1414)) 21.9203)
	(<= (+ (* (y ?a) 0.0021) (+ (* (x ?a) -0.9996) (* (d ?b) -0.0278))) -0.5105)
	(<= (+ (* (y ?a) 0.0336) (+ (* (x ?a) -0.8988) (* (d ?b) -0.4371))) -8.0354)
	(<= (+ (* (y ?a) 0.0416) (+ (* (d ?b) -0.0416) (* (x ?a) -0.9983))) 1.0399)
	(<= (+ (* (y ?a) 0.1239) (+ (* (d ?b) -0.0477) (* (x ?a) -0.9912))) 7.6719)
	(<= (+ (* (y ?a) 0.2100) (+ (* (x ?a) -0.7000) (* (d ?b) -0.6825))) -5.1452)
	(<= (+ (x ?a) (* (y ?a) 0.0097)) 12.6887))
	:effect (and (saved ?b) 
		))

)